z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
apply(z_p,2,var)
#separate each parameter
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#index of repeated individual measures
ind = rep(1:I, each = repm)
#behavioral response model
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x #mean of normal dist
z_sigma = log(popdisp) + predictability[ind] #SD of normal dist
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) ) #observations
#regression coefficients
betas = rep(beta, 9) #naive assumption of equivalent coefficients
#fitness response model
w_mu = 1 + betas[1]*personality + betas[2]*plasticity + betas[3]*predictability +
betas[4]*(personality^2) + betas[5]*(plasticity^2) + betas[6]*(predictability^2) +
betas[7]*(personality*plasticity) + betas[8]*(personality*predictability) +
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res) #observations
#stan data
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm)
#brms data
df = data.frame(x, z, ind)
write("
data {
int<lower=1> I; //total individuals
int<lower=1> N; //total number of observations
int<lower=1> ind[N]; //index of individual observations
vector[N] x; //environmental covariate
vector[N] z; //behavioral measurements
vector[I] w; //fitness measurements
}
parameters {
//fixed population effects
real mu_0z; //z population intercept
real beta_1z; //z population slope
real theta_0z; //z population dispersion
real mu_0; //w population intercept
vector[9] betas; //fitness regression coefficients
//random effects
real<lower=0> sigma_0; //w dispersion (sigma for Gaussian)
vector<lower=0>[3] sd_zp; //RN parameter sds
matrix[I,3] std_dev; //individual-level RN deviations
cholesky_factor_corr[3] R_chol; //RN parameter correlations
}
transformed parameters {
matrix[I,3] zp; //individual phenotypic RN parameter values
zp =  std_dev * diag_pre_multiply(sd_zp, R_chol)';
}
model{
//separate RN parameters
vector[I] zp_mu = col(zp,1); //personality
vector[I] zp_beta = col(zp,2); //plasticity
vector[I] zp_theta = col(zp,3); //predictability
//initialize vectors for response models
vector[N] z_mu; //linear predictor of behavior expectation
vector[N] z_sigma; //linear predictor of behavior dispersion
vector[I] w_eta; //linear predictor of fitness expectation
//behavioral RN response model
z_mu = mu_0z + zp_mu[ind] + (beta_1z + zp_beta[ind]).*x ;
z_sigma = exp(theta_0z + zp_theta[ind]) ;
z ~ normal(z_mu, z_sigma);
//fitness response model
w_eta = mu_0 + betas[1]*zp_mu + betas[2]*zp_beta + betas[3]*zp_theta +
betas[4]*(zp_mu .*zp_mu) + betas[5]*(zp_beta .*zp_beta) +
betas[6]*(zp_theta .*zp_theta) +
betas[7]*(zp_mu .*zp_beta) + betas[8]*(zp_mu .*zp_theta) +
betas[9]*(zp_beta .*zp_theta) ;
w ~ normal(w_eta, sigma_0);
//model priors
//fixed effects
mu_0z ~ normal(0,1);
beta_1z ~ normal(0,1);
theta_0z ~ normal(0,1);
mu_0 ~ normal(0,1);
betas ~ normal(0,10);
//random effects
sd_zp ~ exponential(1);
R_chol ~ lkj_corr_cholesky(2);
to_vector(std_dev) ~ std_normal();
sigma_0 ~ exponential(1);
}
generated quantities{
matrix[3,3] R = R_chol * R_chol'; //RN correlation matrix
matrix[3,3] S = diag_matrix(sd_zp); //RN correlation matrix
matrix[3,3] P = S*R*S; //RN covariance
vector<lower=0>[3] V_P = sd_zp .* sd_zp; //RN variances
}",
"mod1.stan")
#load package
library(rstan)
#compiles the model in C++ for MCMC estimation
mod1 = stan_model("mod1.stan")
#basic settings for rstan
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#sampling posterior
results = sampling(object = mod1, data = data, warmup=1500, iter = 3000, init = 0,
chains=4, cores=4, control=list(adapt_delta=0.95) )
summary(results)$summary[1:17,]
#simulation parameters
I = 500 #number of individuals
repm = 9 #repeated behavioral measures
#fixed effects
beta = 0.3 #regression coefficients
popint = 0 #population behavior intercept
popslope = 0 #population behavior slope
#random effects
sd = sqrt(0.3) #RN parameter standard deviations
cor = 0.3 #correlations between RN parameters
popdisp = sqrt(0.5) #residual SD of behavior
res = sqrt(0.5) #residual SD of fitness
#generate RN covariance matrix P
R = matrix(cor, nrow=3, ncol=3 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1 #make correlation matrix
S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 ) #SD matrix
P = S %*% R %*% S #covariance matrix
#simulate RN parameters for individuals
library(mvtnorm)
z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
apply(z_p,2,var)
#separate each parameter
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#index of repeated individual measures
ind = rep(1:I, each = repm)
#behavioral response model
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x #mean of normal dist
z_sigma = log(popdisp) + predictability[ind] #SD of normal dist
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) ) #observations
#regression coefficients
betas = rep(beta, 9) #naive assumption of equivalent coefficients
#fitness response model
w_mu = 1 + betas[1]*personality + betas[2]*plasticity + betas[3]*predictability +
betas[4]*(personality^2) + betas[5]*(plasticity^2) + betas[6]*(predictability^2) +
betas[7]*(personality*plasticity) + betas[8]*(personality*predictability) +
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res) #observations
#stan data
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm)
#brms data
df = data.frame(x, z, ind)
write("
data {
int<lower=1> I; //total individuals
int<lower=1> N; //total number of observations
int<lower=1> ind[N]; //index of individual observations
vector[N] x; //environmental covariate
vector[N] z; //behavioral measurements
vector[I] w; //fitness measurements
}
parameters {
//fixed population effects
real mu_0z; //z population intercept
real beta_1z; //z population slope
real theta_0z; //z population dispersion
real mu_0; //w population intercept
vector[9] betas; //fitness regression coefficients
//random effects
real<lower=0> sigma_0; //w dispersion (sigma for Gaussian)
vector<lower=0>[3] sd_zp; //RN parameter sds
matrix[I,3] std_dev; //individual-level RN deviations
cholesky_factor_corr[3] R_chol; //RN parameter correlations
}
transformed parameters {
matrix[I,3] zp; //individual phenotypic RN parameter values
zp =  std_dev * diag_pre_multiply(sd_zp, R_chol)';
}
model{
//separate RN parameters
vector[I] zp_mu = col(zp,1); //personality
vector[I] zp_beta = col(zp,2); //plasticity
vector[I] zp_theta = col(zp,3); //predictability
//initialize vectors for response models
vector[N] z_mu; //linear predictor of behavior expectation
vector[N] z_sigma; //linear predictor of behavior dispersion
vector[I] w_eta; //linear predictor of fitness expectation
//behavioral RN response model
z_mu = mu_0z + zp_mu[ind] + (beta_1z + zp_beta[ind]).*x ;
z_sigma = exp(theta_0z + zp_theta[ind]) ;
z ~ normal(z_mu, z_sigma);
//fitness response model
w_eta = mu_0 + betas[1]*zp_mu + betas[2]*zp_beta + betas[3]*zp_theta +
betas[4]*(zp_mu .*zp_mu) + betas[5]*(zp_beta .*zp_beta) +
betas[6]*(zp_theta .*zp_theta) +
betas[7]*(zp_mu .*zp_beta) + betas[8]*(zp_mu .*zp_theta) +
betas[9]*(zp_beta .*zp_theta) ;
w ~ normal(w_eta, sigma_0);
//model priors
//fixed effects
mu_0z ~ normal(0,1);
beta_1z ~ normal(0,1);
theta_0z ~ normal(0,1);
mu_0 ~ normal(0,1);
betas ~ normal(0,10);
//random effects
sd_zp ~ exponential(1);
R_chol ~ lkj_corr_cholesky(2);
to_vector(std_dev) ~ std_normal();
sigma_0 ~ exponential(1);
}
generated quantities{
matrix[3,3] R = R_chol * R_chol'; //RN correlation matrix
matrix[3,3] S = diag_matrix(sd_zp); //RN correlation matrix
matrix[3,3] P = S*R*S; //RN covariance
vector<lower=0>[3] V_P = sd_zp .* sd_zp; //RN variances
}",
"mod1.stan")
#load package
library(rstan)
#compiles the model in C++ for MCMC estimation
mod1 = stan_model("mod1.stan")
#basic settings for rstan
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#sampling posterior
results = sampling(object = mod1, data = data, warmup=1500, iter = 3000, init = 0,
chains=4, cores=4, control=list(adapt_delta=0.95) )
summary(results)$summary[1:17,]
#simulation parameters
I = 500 #number of individuals
repm = 5 #repeated behavioral measures
#fixed effects
beta = 0.3 #regression coefficients
popint = 0 #population behavior intercept
popslope = 0 #population behavior slope
#random effects
sd = sqrt(0.3) #RN parameter standard deviations
cor = 0.3 #correlations between RN parameters
popdisp = sqrt(0.5) #residual SD of behavior
res = sqrt(0.5) #residual SD of fitness
#simulation parameters
I = 500 #number of individuals
repm = 6 #repeated behavioral measures
#fixed effects
beta = 0.3 #regression coefficients
popint = 0 #population behavior intercept
popslope = 0 #population behavior slope
#random effects
sd = sqrt(0.3) #RN parameter standard deviations
cor = 0.3 #correlations between RN parameters
popdisp = sqrt(0.5) #residual SD of behavior
res = sqrt(0.5) #residual SD of fitness
#generate RN covariance matrix P
R = matrix(cor, nrow=3, ncol=3 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1 #make correlation matrix
S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 ) #SD matrix
P = S %*% R %*% S #covariance matrix
#simulate RN parameters for individuals
library(mvtnorm)
z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
#separate each parameter
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#index of repeated individual measures
ind = rep(1:I, each = repm)
#behavioral response model
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x #mean of normal dist
z_sigma = log(popdisp) + predictability[ind] #SD of normal dist
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) ) #observations
#regression coefficients
betas = rep(beta, 9) #naive assumption of equivalent coefficients
#fitness response model
w_mu = 1 + betas[1]*personality + betas[2]*plasticity + betas[3]*predictability +
betas[4]*(personality^2) + betas[5]*(plasticity^2) + betas[6]*(predictability^2) +
betas[7]*(personality*plasticity) + betas[8]*(personality*predictability) +
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res) #observations
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm)
lapply(data,head) #see initial entries of each list item
write("
data {
int<lower=1> I; //total individuals
int<lower=1> N; //total number of observations
int<lower=1> ind[N]; //index of individual observations
vector[N] x; //environmental covariate
vector[N] z; //behavioral measurements
vector[I] w; //fitness measurements
}
parameters {
//fixed population effects
real mu_0z; //z population intercept
real beta_1z; //z population slope
real theta_0z; //z population dispersion
real mu_0; //w population intercept
vector[9] betas; //fitness regression coefficients
//random effects
real<lower=0> sigma_0; //w dispersion (sigma for Gaussian)
vector<lower=0>[3] sd_zp; //RN parameter sds
matrix[I,3] std_dev; //individual-level RN deviations
cholesky_factor_corr[3] R_chol; //RN parameter correlations
}
transformed parameters {
matrix[I,3] zp; //individual phenotypic RN parameter values
zp =  std_dev * diag_pre_multiply(sd_zp, R_chol)' ;
}
model{
//separate RN parameters
vector[I] zp_mu = col(zp,1); //personality
vector[I] zp_beta = col(zp,2); //plasticity
vector[I] zp_theta = col(zp,3); //predictability
//initialize vectors for response models
vector[N] z_mu; //linear predictor of behavior expectation
vector[N] z_sigma; //linear predictor of behavior dispersion
vector[I] w_eta; //linear predictor of fitness expectation
//behavioral RN response model
z_mu = mu_0z + zp_mu[ind] + (beta_1z + zp_beta[ind]).*x ;
z_sigma = exp(theta_0z + zp_theta[ind]) ;
z ~ normal(z_mu, z_sigma);
//fitness response model
w_eta = mu_0 + betas[1]*zp_mu + betas[2]*zp_beta + betas[3]*zp_theta +
betas[4]*(zp_mu .*zp_mu) + betas[5]*(zp_beta .*zp_beta) +
betas[6]*(zp_theta .*zp_theta) +
betas[7]*(zp_mu .*zp_beta) + betas[8]*(zp_mu .*zp_theta) +
betas[9]*(zp_beta .*zp_theta) ;
w ~ normal(w_eta, sigma_0);
//model priors
//fixed effects
mu_0z ~ normal(0,1);
beta_1z ~ normal(0,1);
theta_0z ~ normal(0,1);
mu_0 ~ normal(0,1);
betas ~ normal(0,10);
//random effects
sd_zp ~ exponential(1);
R_chol ~ lkj_corr_cholesky(2);
to_vector(std_dev) ~ std_normal();
sigma_0 ~ exponential(1);
}
generated quantities{
matrix[3,3] R = R_chol * R_chol'; //RN correlation matrix
matrix[3,3] S = diag_matrix(sd_zp); //RN correlation matrix
matrix[3,3] P = S*R*S; //RN covariance
vector<lower=0>[3] V_P = sd_zp .* sd_zp; //RN variances
}",
"mod1.stan")
#load package
library(rstan)
#compiles the model in C++ for MCMC estimation
mod1 = stan_model("mod1.stan")
#basic settings for rstan
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
results = sampling(object = mod1, data = data, warmup=1500, iter = 3000, init = 0,
chains=4, cores=4, control=list(adapt_delta=0.95) )
#progress can be tracked in the viewer pane of RStudio
getwd()
setwd("C:/Users/jormar/Dropbox/Selection-on-RNs")
#save model
saveRDS(results, "results_mod1.RDS")
#extracts posterior estimates
samples =  extract(results)
#MCMC samples for linear selection coefficients
head(samples$betas[,1:3])
library(bayesplot)
#selection coefficients, expected value and 90% CIs
mcmc_areas(results, pars = c( paste0("betas[",seq(1:9),"]") ), prob = 0.9 )
#variance components of RN parameters, mean and 50% CIs (dark line) and 90% CIs
mcmc_intervals(results, pars = c( paste0("V_P[",seq(1:3),"]") ) )
#only first 17 parameters, round to ease interpretation
round(summary(results)$summary[1:17,],2)
100000
2e5
#simulate fake data
age_c = rnorm(25, 0, 1)
min_coded = runif(25, 10, 20)
beta = 0.1
household = rep(1:N, each = 5)
#simulate fake data
N = 25
household = rep(1:N, each = 5)
household
unique(household)
household = rep(1:5, each = 5)
#simulate fake data
N = 25 #sample size
household = rep(1:5, each = 5) #house index
re = rnorm(5, 0, 0.3)
N = 25 #sample size
household = rep(1:5, each = 5) #house index
re = rnorm(5, 0, 0.3) #random intercept
min_coded = runif(25, 10, 20) #offset
age_c = rnorm(25, 0, 1) #age variable
intercept = 0 #global intercept
beta = 0.3 #age slope
#linear predictor
log_values = intercept + log(min_coded) +  beta*age_c + re[household]
log_values
mean = exp(log_values^2 * dispersion)
#raw values
dispersion = 15 #arbitary
mean = exp(log_values^2 * dispersion)
mean
mean = (exp(log_values)*dispersion)^2
mean
mean = (exp(log_values)*1)^2
mean
mean = exp(log_values^2*dispersion)
mean
log_values
install.packages("simstudy")
#gamma distributions are parameterized differently in base R
#so I use this function to convert the more interpretable mean and dispersion
#to scale and shape parameters for base R functions
library(simstudy)
gammaGetShapeRate(exp(log_values), dispersion) #exp is inverse link function of log
val = gammaGetShapeRate(exp(log_values), dispersion) #exp is inverse link function of log
#linear predictor
log_mean = intercept + log(min_coded) +  beta*age_c + re[household]
#raw values
dispersion = 15 #arbitary
#raw values
rgamma(N, shape = val$shape, rate = val$dispersion)
#raw values
rgamma(N, shape = val$shape, rate = val$rate)
#raw values
hist(rgamma(N, shape = val$shape, rate = val$rate))
log(min_coded)
rgamma(25, shape = 0.1, rate = 0.01)
round(rgamma(25, shape = 0.1, rate = 0.01),2)
round(rgamma(25, shape = 0.1, rate = 0.05),2)
round(rgamma(25, shape = 0.05, rate = 0.05),2)
round(rgamma(25, shape = 0.15, rate = 0.05),2)
round(rgamma(25, shape = 0.15, rate = 0.15),2)
round(rgamma(25, shape = 0.15, rate = 0.05),2)
round(rgamma(25, shape = 0.15, rate = 0.5),2)
round(rgamma(25, shape = 0.05, rate = 0.5),2)
round(rgamma(25, shape = 1, rate = 0.5),2)
round(rgamma(25, shape = 1, rate = 1),2)
#for demonstration, I'm just filling in a data frame rather than simulating a model
df = data.frame( id = seq(1:25),
household = rep(1:5, each = 5),
oh = rgamma(25, shape = 1, rate = 1),
age_c = rnorm(25, 0, 1),
runif(25, 10, 20))
#for demonstration, I'm just filling in a data frame rather than simulating a model
df = data.frame( id = seq(1:25),
household = rep(1:5, each = 5),
oh = rgamma(25, shape = 1, rate = 1),
age_c = rnorm(25, 0, 1),
runif(25, 10, 20))
df
#for demonstration, I'm just filling in a data frame rather than simulating a model
df = data.frame( id = seq(1:25),
household = rep(1:5, each = 5),
oh = rgamma(25, shape = 1, rate = 1),
age_c = rnorm(25, 0, 1),
min_coded = runif(25, 10, 20))
df
#for demonstration, I'm just filling in a data frame rather than simulating a model
df = data.frame( id = seq(1:25),
household = rep(1:5, each = 5),
oh = rgamma(25, shape = 1, rate = 1),
age_c = rnorm(25, 0, 1),
min_coded = as.integer(runif(25, 10, 20)))
df
#Stan needs to be installed on your computer for brms to work
library(brms)
#Stan needs to be installed on your computer for brms to work
library(lme4)
#original lme4 model
glmer(oh ~ offset( log(min_coded) ) +  age_c +(1|household_id), data = df,
family = Gamma(link = log), control = glmerControl(optimizer = "bobyqa"))
#for demonstration, I'm just filling in a data frame rather than simulating a model
df = data.frame( id = seq(1:25),
household_id = rep(1:5, each = 5),
oh = rgamma(25, shape = 1, rate = 1),
age_c = rnorm(25, 0, 1),
min_coded = as.integer(runif(25, 10, 20)))
#original lme4 model
glmer(oh ~ offset( log(min_coded) ) +  age_c +(1|household_id), data = df,
family = Gamma(link = log), control = glmerControl(optimizer = "bobyqa"))
#original lme4 model
summary(
glmer(oh ~ offset( log(min_coded) ) +  age_c +(1|household_id), data = df,
family = Gamma(link = log), control = glmerControl(optimizer = "bobyqa")) )
#brms model
summary(
brm(oh ~ offset(log(min_coded)) + age_c +(1|household_id), data = df,
family = Gamma(link = log) ) )
#brms model
summary(
brm(oh ~ offset(log(min_coded)) + age_c +(1|household_id), data = df,
family = Gamma(link = log) ), control = list(adapt_delta = 0.95) )
#brms model (takes longer because model has to first compile in C++)
summary(
brm(oh ~ offset(log(min_coded)) + age_c +(1|household_id), data = df,
family = Gamma(link = log) ), control = list(adapt_delta = 0.95) )
#original lme4 model
m1 = glmer(oh ~ offset( log(min_coded) ) +  age_c +(1|household_id), data = df,
family = Gamma(link = log), control = glmerControl(optimizer = "bobyqa")) )
summary(m1)
#original lme4 model
m1 = glmer(oh ~ offset( log(min_coded) ) +  age_c +(1|household_id), data = df,
family = Gamma(link = log), control = glmerControl(optimizer = "bobyqa"))
summary(m1)
#brms model (takes longer because model has to first compile in C++)
m2 =  brm(oh ~ offset(log(min_coded)) + age_c +(1|household_id), data = df,
family = Gamma(link = log) , control = list(adapt_delta = 0.95) )
summary(m2)
0.37*0.37
