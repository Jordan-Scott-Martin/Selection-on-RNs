}
sim_ppp = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
R = matrix(cors, nrow=3, ncol=3 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1
S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
P = S %*% R %*% S
z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x
z_sigma = log(popdisp) + predictability[ind]
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
#beta coefficients
betas = sample(c(beta, -1*beta), size=9, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality,plasticity,predictability) %*% betas[1:3] +
betas[4]*(personality^2)+betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, R = R, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_ppp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_ppp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
##########################################
#Personality only, N 100, 3
##########################################
I = 100; repm = 3; sim = 200
df.p100.3 = list()
for(i in 1:sim){df.p100.3[[i]] =
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.p100.3, "df_p100_3.RDS")
df.pl100_2
df.pl100_3
df.p100_3
df.p100.3
#load packages
library(mvtnorm)
#library(rstan)
#library(shinystan)
## increase memory to avoid crashing with loop
memory.limit(size=100000)
#set directory
setwd("C:/Users/jormar/Dropbox/Selection-on-RNs/BLUP manuscript")
#Stan settings
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 3 #repeated behavioral measures
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
z_p = rnorm(I, mean = 0, sd = sd)
personality = z_p
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind]
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(beta, size=2, replace=TRUE)
#fitness response model
w_mu = 1 + personality * betas[1] +  betas[2]*(personality^2)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
sim_pp = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
cors = sample(c(cor, -1*cor), size=2*2, replace=TRUE) #random sign
R = matrix(cors, nrow=2, ncol=2 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1
S = matrix( c(sd,0,0,sd), nrow=2, ncol=2)
P = S %*% R %*% S
z_p = rmvnorm(I, mean = rep(0,2), sigma = P)
personality = z_p[,1]
plasticity = z_p[,2]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(beta, size=5, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality,plasticity) %*% betas[1:2] +
betas[3]*(personality^2) + betas[4]*(plasticity^2)+
betas[5]*(personality*plasticity)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, R = R, betas = betas)
return(data)
}
sim_ppp = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
R = matrix(cors, nrow=3, ncol=3 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1
S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
P = S %*% R %*% S
z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x
z_sigma = log(popdisp) + predictability[ind]
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
#beta coefficients
betas = sample(beta, size=9, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality,plasticity,predictability) %*% betas[1:3] +
betas[4]*(personality^2)+betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, R = R, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
sim_ppp(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
I = 500; repm = 6; sim = 200
df.pp500.6 = list()
for(i in 1:sim){
df.pp500.6[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp500.6, "df_pp500_6.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp500.6_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp500.6[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp500.6_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp500.6_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp500.6_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp500.6_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp500.6_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp500.6_pw,"pp500_6pw.RDS")
}
apply(pp500.6_pw, 2, function(x) sum(x>0.95)/length(x))
pp500.3_pw = readRDS(*pp500_3pw.RDS)
pp500.3_pw = readRDS("pp500_3pw.RDS")
apply(pp500.3_pw, 2, function(x) sum(x>0.95)/length(x))
I = 500; repm = 9; sim = 200
df.pp500.9 = list()
for(i in 1:sim){
df.pp500.9[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp500.9, "df_pp500_9.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp500.9_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp500.9[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp500.9_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp500.9_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp500.9_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp500.9_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp500.9_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp500.9_pw,"pp500_9pw.RDS")
}
apply(pp500.9_pw, 2, function(x) sum(x>0.95)/length(x))
I = 600; repm = 6; sim = 200
df.pp600.6 = list()
for(i in 1:sim){
df.pp600.6[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp600.6, "df_pp600_6.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp600.6_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp600.6[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp600.6_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp600.6_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp600.6_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp600.6_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp600.6_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp600.6_pw,"pp600_6pw.RDS")
}
apply(pp600.6_pw, 2, function(x) sum(x>0.95)/length(x))
df
I = 600; repm = 9; sim = 200
df.pp600.9 = list()
for(i in 1:sim){
df.pp600.9[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp600.9, "df_pp600_9.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp600.9_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp600.9[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp600.9_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp600.9_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp600.9_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp600.9_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp600.9_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp600.9_pw,"pp600_9pw.RDS")
}
apply(pp600.9_pw, 2, function(x) sum(x>0.95)/length(x))
#################################################################
#Personality + plasticity, N 700, 3
#################################################################
I = 700; repm = 3; sim = 200
df.pp700.3 = list()
for(i in 1:sim){
df.pp700.3[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp700.3, "df_pp700.3.RDS")
hist(pp600.9_pw[,"pb5"])
I = 700; repm = 3; sim = 200
df.pp700.3 = list()
for(i in 1:sim){
df.pp700.3[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp700.3, "df_pp700.3.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp700.3_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp700.3[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp700.3_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp700.3_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp700.3_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp700.3_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp700.3_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp700.3_pw,"pp700_3pw.RDS")
}
apply(pp700.3_pw, 2, function(x) sum(x>0.95)/length(x))
I = 700; repm = 6; sim = 200
df.pp700.6 = list()
for(i in 1:sim){
df.pp700.6[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp700.6, "df_pp700.6.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp700.6_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp700.6[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp700.6_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp700.6_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp700.6_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp700.6_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp700.6_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp700.6_pw,"pp700_6pw.RDS")
}
apply(pp700.6_pw, 2, function(x) sum(x>0.95)/length(x))
I = 700; repm = 9; sim = 200
df.pp700.9 = list()
for(i in 1:sim){
df.pp700.9[[i]] = sim_pp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp700.9, "df_pp700.9.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_pp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp700.9_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp700.9[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp700.9_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp700.9_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp700.9_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp700.9_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp700.9_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp700.9_pw,"pp700_9pw.RDS")
}
apply(pp700.9_pw, 2, function(x) sum(x>0.95)/length(x))
#load packages
library(mvtnorm)
#library(rstan)
#library(shinystan)
## increase memory to avoid crashing with loop
memory.limit(size=100000)
#set directory
setwd("C:/Users/jormar/Dropbox/Selection-on-RNs/BLUP manuscript")
#Stan settings
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 3 #repeated behavioral measures
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
z_p = rnorm(I, mean = 0, sd = sd)
personality = z_p
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind]
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(beta, size=2, replace=TRUE)
#fitness response model
w_mu = 1 + personality * betas[1] +  betas[2]*(personality^2)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
sim_pp = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
cors = sample(c(cor, -1*cor), size=2*2, replace=TRUE) #random sign
R = matrix(cors, nrow=2, ncol=2 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1
S = matrix( c(sd,0,0,sd), nrow=2, ncol=2)
P = S %*% R %*% S
z_p = rmvnorm(I, mean = rep(0,2), sigma = P)
personality = z_p[,1]
plasticity = z_p[,2]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(beta, size=5, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality,plasticity) %*% betas[1:2] +
betas[3]*(personality^2) + betas[4]*(plasticity^2)+
betas[5]*(personality*plasticity)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, R = R, betas = betas)
return(data)
}
sim_ppp = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
R = matrix(cors, nrow=3, ncol=3 )
R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
diag(R) = 1
S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
P = S %*% R %*% S
z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
personality = z_p[,1]
plasticity = z_p[,2]
predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
z_mu = popint + personality[ind] + (popslope + plasticity[ind])*x
z_sigma = log(popdisp) + predictability[ind]
z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
#beta coefficients
betas = sample(beta, size=9, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality,plasticity,predictability) %*% betas[1:3] +
betas[4]*(personality^2)+betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, R = R, betas = betas)
return(data)
}
#################################################################
#PPP, N 500, 6
#################################################################
I = 500; repm = 6; sim = 200
df.pp500.6 = list()
for(i in 1:sim){
df.pp500.6[[i]] = sim_ppp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.pp500.6, "df_pp500.6.RDS")
#compile Stan model
mod = rstan::stan_model(file="gaus_ppp.stan")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#dataframe for results
pp500.6_pw = data.frame(iter = seq(1:sim), pb1 = NA, pb2 = NA, pb3 = NA, pb4 = NA, pb5 = NA)
#estimate models
for(i in 1:sim){
df = df.pp500.6[[i]]
est_mod <- rstan::sampling(mod, data=df, init="0", iter=n_iter, warmup=n_warm, seed = i,
chains=n_chains, cores=n_chains, control=list(adapt_delta=0.99, max_treedepth=10))
#posterior samples
post = rstan::extract(est_mod)
#selection gradients
betas = data.frame(post[grepl("betas", names(post)) ] )
pp500.6_pw[i,"pb1"] = sum(sign(df$betas[1])==sign(betas[,1]))/length(betas[,1])
pp500.6_pw[i,"pb2"] = sum(sign(df$betas[2])==sign(betas[,2]))/length(betas[,2])
pp500.6_pw[i,"pb3"] = sum(sign(df$betas[3])==sign(betas[,3]))/length(betas[,3])
pp500.6_pw[i,"pb4"] = sum(sign(df$betas[4])==sign(betas[,4]))/length(betas[,4])
pp500.6_pw[i,"pb5"] = sum(sign(df$betas[5])==sign(betas[,5]))/length(betas[,5])
saveRDS(pp500.6_pw,"pp500.6pw.RDS")
}
apply(pp500.6_pw, 2, function(x) sum(x>0.95)/length(x))
df.ppp600.6 = list()
for(i in 1:sim){
df.ppp600.6[[i]] = sim_ppp(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.ppp600.6, "df_ppp600.6.RDS")
