remotes::install_github("rstudio/rticles")
library(rticles)
install.packages("rticles")
install.packages("rticles")
library(rticles)
unlink('Untitled/Untitled_cache', recursive = TRUE)
unlink('C:/Temp/BLUPs/BLUP manuscript/BLUP manuscript_cache', recursive = TRUE)
?brms::negbinomial
x = seq(-1,1,by = 0.01)
y = 0*x + 0.3*(x*x)
plot(y  x)
plot(y ~ x)
y = 0*x - 0.3*(x*x)
plot(y ~ x)
install.packages(c("cachem", "dbplyr", "distributional", "dplyr", "emmeans", "ks", "performance", "systemfonts", "TMB"))
install.packages("nlme", lib="C:/Program Files/R/R-4.0.3/library")
install.packages("dplyr")
install.packages("nlme", lib="C:/Program Files/R/R-4.0.3/library")
#load packages
memory.limit(100000)
#load data
setwd("~/Current research/GNM human data")
data = read.csv("B5web.csv")
#load data
setwd("~/Current research/GNM human data")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("ftp://cran.r-project.org/incoming/pretest/StanHeaders_2.21.0-6.tar.gz", repos = NULL, type = "source")
install.packages("ftp://cran.r-project.org/incoming/pretest/StanHeaders_2.21.0-6.tar.gz", repos = NULL, type = "source")
install.packages("http://cran.r-project.org/incoming/pretest/StanHeaders_2.21.0-6.tar.gz", repos = NULL, type = "source")
install.packages("cran.r-project.org/incoming/pretest/StanHeaders_2.21.0-6.tar.gz", repos = NULL, type = "source")
install.packages("//cran.r-project.org/incoming/pretest/StanHeaders_2.21.0-6.tar.gz", repos = NULL, type = "source")
example(stan_model, package = "rstan", run.dontrun = TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
source("https://raw.githubusercontent.com/stan-dev/rstan/develop/StanHeaders/install-github.R")
install_StanHeaders(rstan_branch = "develop", math_branch = "StanHeaders_2.21", library_branch = "StanHeaders_2.21")
unlink('C:/Temp/IVSO/IVSO analyses_cache', recursive = TRUE)
rexp(1e4,0,1)
rexp(1e4,1)
#load packages
library(mvtnorm)
library(rstan)
library(shinystan)
## increase memory to avoid crashing with loop
memory.limit(size=100000)
#set directory
setwd("C:/Temp/BLUPs/BLUP manuscript")
#Stan settings
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 9 #repeated behavioral measures
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 3 #repeated behavioral measures
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
#cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
#R = matrix(cors, nrow=3, ncol=3 )
#R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
#diag(R) = 1
#S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
#P = S %*% R %*% S
#z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
z_p = rnorm(I, mean = 0, sd = sd)
#personality = z_p[,1]
#plasticity = z_p[,2]
#predictability = z_p[,3]
#environmental covariate (z-score)
#x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] #+ (popslope + plasticity[ind])*x
#z_sigma = log(popdisp) + predictability[ind]
#z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(c(beta, -1*beta), size=3, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality) * betas[1] +
betas[2]*(personality^2) #betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
#betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
#betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#Stan settings
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 3 #repeated behavioral measures
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
#cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
#R = matrix(cors, nrow=3, ncol=3 )
#R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
#diag(R) = 1
#S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
#P = S %*% R %*% S
#z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
z_p = rnorm(I, mean = 0, sd = sd)
#personality = z_p[,1]
#plasticity = z_p[,2]
#predictability = z_p[,3]
#environmental covariate (z-score)
#x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] #+ (popslope + plasticity[ind])*x
#z_sigma = log(popdisp) + predictability[ind]
#z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(c(beta, -1*beta), size=3, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality) * betas[1] +
betas[2]*(personality^2) #betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
#betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
#betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
#cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
#R = matrix(cors, nrow=3, ncol=3 )
#R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
#diag(R) = 1
#S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
#P = S %*% R %*% S
#z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
z_p = rnorm(I, mean = 0, sd = sd)
personality = z_p[,1]
#plasticity = z_p[,2]
#predictability = z_p[,3]
#environmental covariate (z-score)
#x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] #+ (popslope + plasticity[ind])*x
#z_sigma = log(popdisp) + predictability[ind]
#z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(c(beta, -1*beta), size=3, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality) * betas[1] +
betas[2]*(personality^2) #betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
#betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
#betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
#cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
#R = matrix(cors, nrow=3, ncol=3 )
#R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
#diag(R) = 1
#S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
#P = S %*% R %*% S
#z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
z_p = rnorm(I, mean = 0, sd = sd)
personality = z_p
#plasticity = z_p[,2]
#predictability = z_p[,3]
#environmental covariate (z-score)
#x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] #+ (popslope + plasticity[ind])*x
#z_sigma = log(popdisp) + predictability[ind]
#z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(c(beta, -1*beta), size=3, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality) * betas[1] +
betas[2]*(personality^2) #betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
#betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
#betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
#simulation parameters
cor = 0.3 #RN correlations
sd = sqrt(0.3) #RN standard deviation
beta = 0.3
res = sqrt(0.5) #observation-level residual variance
popint = 0 #population RN intercept
popslope = 0 #population RN slope
popdisp = sqrt(0.5) #population RN dispersion
I = 100 #number of individuals
repm = 3 #repeated behavioral measures
#simulation algorithms
sim_p = function(cor,sd,beta,res,popint,popslope,popdisp,N,repm){
#RN parameters
#cors = sample(c(cor, -1*cor), size=3*3, replace=TRUE) #random sign
#R = matrix(cors, nrow=3, ncol=3 )
#R[lower.tri(R)] = t(R)[lower.tri(R)] #force symmetric
#diag(R) = 1
#S = matrix( c(sd,0,0,0,sd,0,0,0,sd), nrow=3, ncol=3 )
#P = S %*% R %*% S
#z_p = rmvnorm(I, mean = rep(0,3), sigma = P)
z_p = rnorm(I, mean = 0, sd = sd)
personality = z_p
#plasticity = z_p[,2]
#predictability = z_p[,3]
#environmental covariate (z-score)
x = rnorm(I*repm, 0, 1)
#behavioral response model
ind = rep(1:I, each = repm) #index of repeated individual measures
popslope = sample(c(popslope, -1*popslope),size=1) #random sign
z_mu = popint + personality[ind] #+ (popslope + plasticity[ind])*x
#z_sigma = log(popdisp) + predictability[ind]
#z = rnorm(I*repm, mean = z_mu, sd = exp(z_sigma) )
z = rnorm(I*repm, mean = z_mu, sd = popdisp )
#beta coefficients
betas = sample(c(beta, -1*beta), size=3, replace=TRUE)
#fitness response model
w_mu = 1 + cbind(personality) * betas[1] +
betas[2]*(personality^2) #betas[5]*(plasticity^2)+betas[6]*(predictability^2)+
#betas[7]*(personality*plasticity)+betas[8]*(personality*predictability)+
#betas[9]*(plasticity*predictability)
w = rnorm(I, mean = w_mu, sd = res)
data = list(x = x, z = z, w = w, ind = ind, I = I, N = I*repm, betas = betas)
return(data)
}
#simulate dataset
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm)
df_p100.3 = list()
#generate 200 datasets for each condition
I = 100; repm = 3; sim = 200
for(i in 1:sim){df_p100.3[[i]] =sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
#generate 200 datasets for each condition
I = 100; repm = 3; sim = 200
df_p100.3 = list()
for(i in 1:sim){df_p100.3[[i]] =
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
df_p100.3
df.p100.3 = list()
for(i in 1:sim){df.p100.3[[i]] =
sim_p(cor,sd,beta,res,popint,popslope,popdisp,N,repm) }
saveRDS(df.p100.3, "df_p100_3.RDS")
#compile Stan model
mod = stan_model(file="gaus_p.stan")
